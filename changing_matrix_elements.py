Напишите программу, на вход которой подаётся прямоугольная матрица в виде последовательности строк, 
заканчивающихся строкой, содержащей только строку "end" (без кавычек)

Программа должна вывести матрицу того же размера, 
у которой каждый элемент в позиции i, j равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1). 
У крайних символов соседний элемент находится с противоположной стороны матрицы.

В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.

c = []
while True: 
    a = input().split()
    if a == ['end']:
        break
    c.append(a)
n, m = len(c), len(c[0]) #строки и столбцы 
for i in range(n):
    for j in range(m):
        x = int(c[i][j-1]) + int(c[i][j+1-m]) + int(c[i-1][j]) + int(c[i+1-n][j]) #пояснение ниже
        print(x, end=' ')
    print()
    
#Двумерный список это просто одномерный список, элементами которого являются другие списки. Именно это в решении и происходит. 
#В пустой (одномерный) список добавляются другие списки, получается список списков, т.е. двумерный список.

#с - двумерный список. len(c) - количество элементов этого списка, т.е. строк. c[0] - нулевой элемент этого списка (строка). 
#Поэтому len(c[0]) возвращает количество элементов в нулевой строке двумерного списка, т.е. количество столбцов в двумерном списке.


#Если боитесь выйти за нижнюю границу индекса (например, у вас может оказаться i равным 0, а вам надо в коде от i отнять единицу), 
#то не бойтесь, он автоматом перейдет на отрицательный индекс i = -1, 
#а это как раз то, куда вас просили перескочить - крайний правый элемент.

#Если же боитесь выйти за верхнюю границу (у вас может i принять верхнее значение i = m-1 (где m -- ширина списка),
#а вам к вашему i надо прибавить единицу), то перед прибавлением единицы отнимите собственно ширину списка (не i+1, а i-m+1). 
#i-m переведет ваш индекс из неотрицательного в отрицательный, при этом его фактически не изменив, 
#но теперь прибавка единицы гарантированно не вынесет вас за границу списка.

#На пальцах:
#список - - - - [a,   b,  c,   d]
#индексы - - - -[0,   1,  2,   3] -- этими мы обычно оперируем
#индексы - - - -[-4, -3, -2,  -1] -- а иногда удобнее этими
#В таком случае d имеет индекс -1, и следующий шаг (i+1), приведёт вас не к i = 4 (выход за границы), а к i = 0, получим a
